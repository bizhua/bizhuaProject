package com.fmgame.etherwork.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint40;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class CoinPawsGame extends Contract {
    private static final String BINARY = "";

    protected CoinPawsGame(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CoinPawsGame(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<EBirthRctlEventResponse> getEBirthRctlEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("EBirthRctl", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint40>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<EBirthRctlEventResponse> responses = new ArrayList<EBirthRctlEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            EBirthRctlEventResponse typedResponse = new EBirthRctlEventResponse();
            typedResponse.log = transactionReceipt.getLogs().get(valueList.indexOf(eventValues));
            typedResponse._asyncId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._tonyId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._outline = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._character = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<EBirthRctlEventResponse> eBirthRctlEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        final Event event = new Event("EBirthRctl", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint40>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, EBirthRctlEventResponse>() {
            @Override
            public EBirthRctlEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                EBirthRctlEventResponse typedResponse = new EBirthRctlEventResponse();
                typedResponse.log = log;
                typedResponse._asyncId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._tonyId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._outline = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._character = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public List<EBirthEventResponse> getEBirthEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("EBirth", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint40>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<EBirthEventResponse> responses = new ArrayList<EBirthEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            EBirthEventResponse typedResponse = new EBirthEventResponse();
            typedResponse.log = transactionReceipt.getLogs().get(valueList.indexOf(eventValues));
            typedResponse._asyncId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._tonyId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._motherId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._fatherId = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._outline = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._character = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<EBirthEventResponse> eBirthEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        final Event event = new Event("EBirth", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint40>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, EBirthEventResponse>() {
            @Override
            public EBirthEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                EBirthEventResponse typedResponse = new EBirthEventResponse();
                typedResponse.log = log;
                typedResponse._asyncId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._tonyId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._motherId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._fatherId = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._outline = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse._character = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public List<ETransferEventResponse> getETransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ETransfer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ETransferEventResponse> responses = new ArrayList<ETransferEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ETransferEventResponse typedResponse = new ETransferEventResponse();
            typedResponse.log = transactionReceipt.getLogs().get(valueList.indexOf(eventValues));
            typedResponse._from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._tonyId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ETransferEventResponse> eTransferEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        final Event event = new Event("ETransfer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ETransferEventResponse>() {
            @Override
            public ETransferEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ETransferEventResponse typedResponse = new ETransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._tonyId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<EApprovalEventResponse> getEApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("EApproval", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<EApprovalEventResponse> responses = new ArrayList<EApprovalEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            EApprovalEventResponse typedResponse = new EApprovalEventResponse();
            typedResponse.log = transactionReceipt.getLogs().get(valueList.indexOf(eventValues));
            typedResponse._owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._approved = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._tonyId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<EApprovalEventResponse> eApprovalEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        final Event event = new Event("EApproval", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, EApprovalEventResponse>() {
            @Override
            public EApprovalEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                EApprovalEventResponse typedResponse = new EApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._approved = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._tonyId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<EPregnantEventResponse> getEPregnantEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("EPregnant", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<EPregnantEventResponse> responses = new ArrayList<EPregnantEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            EPregnantEventResponse typedResponse = new EPregnantEventResponse();
            typedResponse.log = transactionReceipt.getLogs().get(valueList.indexOf(eventValues));
            typedResponse._owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._motherId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._fatherId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._cooldownEndBlock = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<EPregnantEventResponse> ePregnantEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        final Event event = new Event("EPregnant", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, EPregnantEventResponse>() {
            @Override
            public EPregnantEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                EPregnantEventResponse typedResponse = new EPregnantEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._motherId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._fatherId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._cooldownEndBlock = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getTonyData(BigInteger _tonyId) {
        final Function function = new Function("getTonyData", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tonyId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint40>() {}, new TypeReference<Uint40>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint40>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> approve(String _to, BigInteger _tonyId) {
        Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tonyId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> giveBirth(BigInteger _asyncId, BigInteger _motherId) {
        Function function = new Function(
                "giveBirth", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint40(_asyncId), 
                new org.web3j.abi.datatypes.generated.Uint256(_motherId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> giveBirthReadyRctl(String _motherOwner,
            BigInteger _motherId, BigInteger _fatherId) {
        Function function = new Function(
                "giveBirthReadyRctl", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_motherOwner), 
                new org.web3j.abi.datatypes.generated.Uint256(_motherId), 
                new org.web3j.abi.datatypes.generated.Uint256(_fatherId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isPregnant(BigInteger _tonyId) {
        Function function = new Function("isPregnant", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tonyId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to,
            BigInteger _tonyId) {
        Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tonyId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setGeneScienceAddress(String _address) {
        Function function = new Function(
                "setGeneScienceAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unpauseGame() {
        Function function = new Function(
                "unpauseGame", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createTonyByRobot(BigInteger _asyncId, String _to,
            BigInteger _character, BigInteger _outline) {
        Function function = new Function(
                "createTonyByRobot", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint40(_asyncId), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint16(_character), 
                new org.web3j.abi.datatypes.generated.Uint256(_outline)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> canBreedWith(BigInteger _motherId, BigInteger _fatherId) {
        Function function = new Function("canBreedWith", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motherId), 
                new org.web3j.abi.datatypes.generated.Uint256(_fatherId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> pauseGame() {
        Function function = new Function(
                "pauseGame", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> finalPowerToRobot(String _ad) {
        Function function = new Function(
                "finalPowerToRobot", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_ad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approveSiring(String _addr, BigInteger _fatherId) {
        Function function = new Function(
                "approveSiring", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr), 
                new org.web3j.abi.datatypes.generated.Uint256(_fatherId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> fatherAllowedToAddress(BigInteger param0) {
        Function function = new Function("fatherAllowedToAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> ownerOf(BigInteger _tonyId) {
        Function function = new Function("ownerOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tonyId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setSecondsPerBlockBirth(BigInteger secs) {
        Function function = new Function(
                "setSecondsPerBlockBirth", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(secs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> tonyIndexToApproved(BigInteger param0) {
        Function function = new Function("tonyIndexToApproved", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> geneCreate() {
        Function function = new Function("geneCreate", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> cooldowns(BigInteger param0) {
        Function function = new Function("cooldowns", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _tonyId) {
        Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tonyId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> giveBirthReady(BigInteger _motherId,
            BigInteger _fatherId) {
        Function function = new Function(
                "giveBirthReady", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motherId), 
                new org.web3j.abi.datatypes.generated.Uint256(_fatherId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> tonyIndexToOwner(BigInteger param0) {
        Function function = new Function("tonyIndexToOwner", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approveRctl(String _from, String _to,
            BigInteger _tonyId) {
        Function function = new Function(
                "approveRctl", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tonyId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isReadyToBreed(BigInteger _tonyId) {
        Function function = new Function("isReadyToBreed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tonyId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> approveSiringRctl(String _from, String _addr,
            BigInteger _fatherId) {
        Function function = new Function(
                "approveSiringRctl", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_addr), 
                new org.web3j.abi.datatypes.generated.Uint256(_fatherId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> robotController() {
        Function function = new Function("robotController", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> secondsPerBlockBirth() {
        Function function = new Function("secondsPerBlockBirth", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> ownershipTonyCount(String param0) {
        Function function = new Function("ownershipTonyCount", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferRctl(String _from, String _to,
            BigInteger _tonyId) {
        Function function = new Function(
                "transferRctl", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tonyId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> tonysOfOwner(String _owner) {
        Function function = new Function("tonysOfOwner", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<BigInteger> totalTonys() {
        Function function = new Function("totalTonys", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<CoinPawsGame> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CoinPawsGame.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CoinPawsGame> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CoinPawsGame.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static CoinPawsGame load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new CoinPawsGame(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static CoinPawsGame load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CoinPawsGame(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class EBirthRctlEventResponse {
        public Log log;

        public BigInteger _asyncId;

        public String _owner;

        public BigInteger _tonyId;

        public BigInteger _outline;

        public BigInteger _character;
    }

    public static class EBirthEventResponse {
        public Log log;

        public BigInteger _asyncId;

        public String _owner;

        public BigInteger _tonyId;

        public BigInteger _motherId;

        public BigInteger _fatherId;

        public BigInteger _outline;

        public BigInteger _character;
    }

    public static class ETransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _tonyId;
    }

    public static class EApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _approved;

        public BigInteger _tonyId;
    }

    public static class EPregnantEventResponse {
        public Log log;

        public String _owner;

        public BigInteger _motherId;

        public BigInteger _fatherId;

        public BigInteger _cooldownEndBlock;
    }
}
